[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tokamak-rl-control-suite"
dynamic = ["version"]
description = "Reinforcement learning plasma-shape controllers for compact tokamaks"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
authors = [
    {name = "Daniel Schmidt"},
]
keywords = [
    "reinforcement-learning",
    "plasma-physics", 
    "tokamak",
    "fusion-energy",
    "control-systems",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "gymnasium>=0.29.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "tensorboard>=2.0.0",
    "stable-baselines3>=2.0.0",
    "torch>=1.12.0",
    "h5py>=3.7.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
mpi = [
    "mpi4py>=3.1.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "black>=23.0.0",
    "jupyter>=1.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/tokamak-rl-control-suite"
Documentation = "https://tokamak-rl-control.readthedocs.io"
Repository = "https://github.com/yourusername/tokamak-rl-control-suite.git"
Issues = "https://github.com/yourusername/tokamak-rl-control-suite/issues"

[project.scripts]
tokamak-train = "tokamak_rl.cli:train"
tokamak-eval = "tokamak_rl.cli:evaluate"

[tool.hatch.version]
path = "src/tokamak_rl/__init__.py"

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]